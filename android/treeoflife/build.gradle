// vim: set filetype=groovy :

apply plugin: 'android'

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    aaptOptions {
        ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~"
    }
}

android.applicationVariants.all {
    def ceylonModuleName = "treeoflife.android"
    def ceylonModuleVersion = "1"  // TODO: this should be autodetected :(
    def ceylonExecutable = "ceylon"
    def ceylonVersion = "1.1.0"

    def pfx = "ceylon-${name}-"
    File ceylonDir = new File(project.buildDir, "ceylon/${name}/").canonicalFile

    File ceylonSrc = new File(ceylonDir, "src")
    File ceylonFinalRepo = new File(ceylonDir, "finalrepo")
    File ceylonGradleRepo = new File(ceylonDir, "gradledepsrepo")
    File ceylonOutRepo = new File(ceylonDir, "outrepo")
    File ceylonDepDir = new File(ceylonDir, "extractedjars")

    def optimizerRepo = file("../../optimizer/modules/")

    def destinationDirectory = javaCompile.destinationDir
    def javaCompileDeps = javaCompile.dependsOn.clone()
    def compileRan = false

    File blobjar = new File(ceylonDir, "blob.jar")

    task "${pfx}prepare"(dependsOn: javaCompileDeps) << {
        ceylonDir.mkdirs()
    }
    task "${pfx}extractdeps"(dependsOn: "${pfx}prepare") {
        def classpath = javaCompile.classpath
        def runtimeJars = plugins.findPlugin(com.android.build.gradle.AppPlugin).runtimeJars
        classpath = files(runtimeJars) + classpath

        inputs.files classpath
        outputs.files fileTree(ceylonDepDir)

        doFirst {
            blobjar.delete()
            def blacklist = new HashSet()
            file("blacklist").eachLine { line ->
                blacklist.add(line.trim())
            }
            for (thing in classpath) {
                println("copying ${thing}...")
                copy {
                    from(zipTree(thing))
                    into(ceylonDepDir.canonicalFile)
                    exclude { item ->
                        return blacklist.contains(item.path)
                    }
                }
            }
        }
    }
    task "${pfx}blobjar"(type: Jar, dependsOn: "${pfx}extractdeps") {
        from fileTree(ceylonDepDir.canonicalFile)
        outputs.upToDateWhen {
            return blobjar.exists()
        }
        archiveName = "blob.jar"
        destinationDir = ceylonDir.canonicalFile
        entryCompression = ZipEntryCompression.STORED
        doLast {
            ["rm", "-rf", ceylonGradleRepo.canonicalPath].execute().waitFor()
        }
    }
    task "${pfx}importdeps"(type: Exec, dependsOn: "${pfx}blobjar") {
        outputs.upToDateWhen {
            return ceylonGradleRepo.exists()
        }

        commandLine ceylonExecutable, "import-jar",\
                    "--force",\
                    "--out", ceylonGradleRepo.canonicalPath,\
                    "gradleCeylonBuild.gradleDependencies/combinedJar",\
                    blobjar.canonicalPath
        doFirst {
            ceylonGradleRepo.mkdirs()
        }
    }
    task "${pfx}copysource"(dependsOn: "${pfx}prepare") {
        def source = javaCompile.source + fileTree('src/main/java').include('**/*.ceylon')
        inputs.files source
        outputs.files fileTree(ceylonSrc)
        doFirst {
            ["rm", "-rf", ceylonSrc.canonicalPath].execute().waitFor()
            ceylonSrc.mkdirs()
            copy {
                from(source)
                into(ceylonSrc)
                include '**/R.java'
                filter { line ->
                    line = line.replaceAll(~/(    public static final class )([^ ]+)/,
                                            '    public static final _$2 $2 = new _$2();\n$1_$2')
                }
            }
            copy {
                from(source)
                into(ceylonSrc)
                exclude '**/R.java'
            }
        }
    }
    task "${pfx}compile"(type: Exec, dependsOn: ["${pfx}importdeps", "${pfx}copysource"]) {
        inputs.files fileTree(ceylonSrc)
        outputs.dir ceylonOutRepo

        commandLine ceylonExecutable, \
            "compile",\
            "--out", ceylonOutRepo.canonicalPath,\
            "--rep", ceylonGradleRepo.canonicalPath,\
            "--rep", optimizerRepo.canonicalPath,\
            "--source", ceylonSrc.canonicalPath,\
            ceylonModuleName
        doFirst {
            compileRan = true
            ["rm", "-rf", ceylonOutRepo.canonicalPath].execute().waitFor()
            ceylonOutRepo.mkdirs()
        }
    }
    task "${pfx}clear-final-repo"(dependsOn: "${pfx}compile") {
        outputs.upToDateWhen { return !compileRan }

        doFirst {
            ["rm", "-rf", ceylonFinalRepo.canonicalPath].execute().waitFor()
        }
    }
    task "${pfx}appmodule"(type: Exec, dependsOn: "${pfx}clear-final-repo") {
        outputs.upToDateWhen { return !compileRan }

        commandLine ceylonExecutable, \
            "copy",\
            "--out", ceylonFinalRepo.canonicalPath,\
            "--rep", ceylonOutRepo.canonicalPath,\
            "--rep", ceylonGradleRepo.canonicalPath,\
            "--rep", optimizerRepo.canonicalPath,\
            "--jvm",\
            "-r",\
            "${ceylonModuleName}/${ceylonModuleVersion}"
    }
    task "${pfx}languagemodule"(type: Exec, dependsOn: "${pfx}clear-final-repo") {
        outputs.upToDateWhen { return !compileRan }

        commandLine ceylonExecutable, \
            "copy",\
            "--out", ceylonFinalRepo.canonicalPath,\
            "--jvm",\
            "ceylon.language/${ceylonVersion}"
    }

    task "${pfx}build"(dependsOn: ["${pfx}languagemodule", "${pfx}appmodule"]) {
        outputs.upToDateWhen { return !compileRan }
        doFirst {
            fileTree(ceylonFinalRepo.canonicalFile).include("**/*.car").include("**/*.jar").visit { x ->
                if (!x.name.endsWith(".car") && !x.name.endsWith(".jar")) {
                    return
                }
                if (x.name == "gradleCeylonBuild.gradleDependencies-combinedJar.jar") {
                    return
                }
                // todo: make sure we don't extract gradleCeylonBuild...
                print "copying to output: "
                println x.name
                copy {
                    from(zipTree(x.file.canonicalFile))
                    into(destinationDirectory.canonicalFile)
                }
            }
        }
    }

    javaCompile.dependsOn("${pfx}build")
    javaCompile.enabled = false
}

task copytreeoflife(type: Copy) {
    def target = file("src/main/assets/app/")
    def gitroot = fileTree("../../");
    gitroot.include "ui/"
    gitroot.include "treeoflife/"
    gitroot.include "bin/"

    gitroot.exclude "**/__pycache__/"
    gitroot.exclude "**/*.pyc"
    gitroot.exclude "**/.git/"
    gitroot.exclude "**/.travis.yml"

    from gitroot
    into target
    doFirst {
        if (target.exists()) {
            ["rm", "-rf", target.canonicalPath].execute().waitFor()
        }
    }
}

task copycerts(type: Copy, dependsOn: [copytreeoflife]) {
    def target = file("src/main/assets/app/tls/")
    def keysDir = System.getenv("TLS_KEYS")
    if (keysDir == null) {
        throw new RuntimeException("TLS_KEYS environment variable required to build");
    }
    def tlsroot = fileTree(keysDir);
    tlsroot.include "*.pem"

    from tlsroot
    into target

    doFirst {
        def nodename = System.getenv("NODE_NAME")
        if (nodename == null) {
            throw new RuntimeException("NODE_NAME environment variable required to build");
        }
        file("src/main/assets/app/name").text = nodename
    }
}

task generateFileListing(dependsOn: [copytreeoflife, copycerts]) {
    def ft = fileTree("src/main/assets")
    ft.exclude "listing"
    ft.exclude "executables"
    ft.exclude "**/*.sw*"
    ft.exclude "**/__pycache__/"

    inputs.files ft
    outputs.file "src/main/assets/listing"
    outputs.file "src/main/assets/executables"

    doFirst {
        def files = []
        def executables = []
        def torename = [];
        ft.visit { details ->
            if (details.file.isDirectory() && details.name.startsWith("_")) {
                torename.add(details.file)
            }
        };
        torename.reverseEach {
            def file = new File(it.parentFile,
                        "startunderscore" + it.name)
            print "renaming "
            print it.canonicalPath
            print " to "
            println file.canonicalPath
            it.renameTo(file)
        }
        ft.visit { details ->
            if (details.file.isDirectory()) {
                return
            }
            if (details.file.canExecute()) {
                executables.add(details.path)
            }
            files.add(details.path)
        };
        file("src/main/assets/listing").text = files.join("\n")
        file("src/main/assets/executables").text = executables.join("\n")
    }
}

android.applicationVariants.all {
    mergeAssets.dependsOn(generateFileListing)
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}
