"""
- multi-writer(!!!)
- non-locking
- transfer data to other nodes as soon as possible
    - when connected, send a diff relative to a hash immediately, along with the hash of the new data
- uses hash history, optionally with hash data for fast fast-forward deltas
    - hash of data, not including parent hash
- consider it a change ONLY WHEN USER-INDUCED! automatically triggered stuff is expected to be the same
    across devices, so don't consider that to be a change


TODO: how long should history be kept before we no longer try to do fast-forwards?
answer: forever until further notice


fast-forward:
    a: abc def ghi jkl mno pqr stu
    b: abc def ghi jkl mno pqr stu vwx yz

    on connect:
        a: CURRENT HASH stu
        b: CURRENT HASH yz
        a: HASH NOT KNOWN yz
        b: CURRENT DATA <blah blah>
        (a: acknowledge data?)
        a: no further communication

equal:
    a: abc def ghi jkl mno pqr stu vwx yz
    b: abc def ghi jkl mno pqr stu vwx yz

    on connect:
        a: CURRENT HASH yz
        b: CURRENT HASH yz
        init finished


diverged:
    a: abc def ghi jkl mno pqr stu 123 456
    b: abc def ghi jkl mno pqr stu vwx yz

    on connect:
        a: CURRENT HASH 456
        b: CURRENT HASH yz
        a: HASH NOT KNOWN yz
        b: HASH NOT KNOWN 456
        a: CURRENT DATA <blah blah>
        b: CURRENT DATA <blah blah>
        (a: acknowledge data?)
        (b: acknowledge data?)
        notify user of failed sync. disconnect, or etc.

note: current hash **ALWAYS** refers to the last user-induced change hash!
**NEVER** to the hash of the current serialized data!
"""

protocol:
    protocol init:
        send CURRENT HASH ``hash`` message

    on CURRENT HASH ``hash`` message:
        important: processing of this message must not start until we've sent our own copy of it!
        check our history for the hash

        if the hash is unknown:
            send HASH ``hash`` UNKNOWN, PLEASE SEND DATA message
            save that we sent HASH UNKNOWN, PLEASE SEND DATA

    on HASH ``hash`` UNKNOWN, PLEASE SEND DATA message:
        if we requested data ourselves:
            diverged data!
            save that we had diverged data on connection init

        send CURRENT DATA message

    on CURRENT DATA message:
        TODO: rebroadcast (for 3+ nodes)
        if we had diverged data on connection init:
            save to "diverged data" staging area, warn user
        otherwise:
            set our current data to received current data
            append remote current hash to our hash history

    on user-induced data change:
        send CURRENT DATA WITH PARENT HASHES message

    on CURRENT DATA WITH PARENT HASH[ES] message:
        TODO: rebroadcast (for 3+ nodes)
        if our current hash is not in the provided hashes:
            send DIVERGED DATA message, containing our current data
            save remote data to diverged data staging area, warn user
        otherwise:
            set our current data to received current data
            append remote current hash to our hash history
            
    on DIVERGED DATA message:
        save remote diverged data to staging area, warn user


    to resolve diverged data:
        add both parent hashes to history, if not already present
        add newly repaired data to end
        send CURRENT DATA WITH PARENT HASHES message
